<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin/dashboard.css">
  <style>
    .stats-card {
            background: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            height: 100%;
        }
        .stats-icon {
            font-size: 24px;
            margin-bottom: 10px;
        }
        .stats-value {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .stats-label {
            color: #666;
            font-size: 14px;
        }
        .dashboard-card {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .report-title {
            margin: 0;
        }
        .report-actions .btn {
            margin-left: 10px;
        }
        .chart-container {
            position: relative;
            margin: auto;
        }
        .top-list-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
        }
        .rank-badge {
            width: 30px;
            height: 30px;
            background: #f8f9fa;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
  </style>
</head>

<body>

    <%- include("../../views/partials/admin/header") %>

  <main class="main-content">
    <div class="container-fluid py-4">

      <!-- Stats Row -->
      <div class="row g-3 mb-4">
        <div class="col-12 col-sm-6 col-lg-3">
          <div class="stats-card">
            <div class="stats-icon">
              <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="stats-value"><%= orderCount %></div>
            <div class="stats-label">Total Orders</div>
            <div class="stats-trend <%= orderCountThisMonth > 0 ? 'positive' : 'negative' %>">
              <i class="fas <%= orderCountThisMonth > 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
              <%= orderCountThisMonth %> this month
            </div>
          </div>
        </div>
        <div class="col-12 col-sm-6 col-lg-3">
          <div class="stats-card">
            <div class="stats-icon">
              <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="stats-value">$<%= totalRevenue ? totalRevenue.toLocaleString() : '0' %></div>
            <div class="stats-label">Total Revenue</div>
            <div class="stats-trend <%= totalRevenueThisMonth > 0 ? 'positive' : 'negative' %>">
              <i class="fas <%= totalRevenueThisMonth > 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
              $<%= totalRevenueThisMonth ? totalRevenueThisMonth.toLocaleString() : '0' %> this month
            </div>
          </div>
        </div>
        <div class="col-12 col-sm-6 col-lg-3">
          <div class="stats-card">
            <div class="stats-icon">
              <i class="fas fa-users"></i>
            </div>
            <div class="stats-value"><%= customers %></div>
            <div class="stats-label">Customers</div>
            <div class="stats-trend <%= customersThisMonth > 0 ? 'positive' : 'negative' %>">
              <i class="fas <%= customersThisMonth > 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
              <%= customersThisMonth %> new this month
            </div>
          </div>
        </div>
        <div class="col-12 col-sm-6 col-lg-3">
          <div class="stats-card">
            <div class="stats-icon">
              <i class="fas fa-box"></i>
            </div>
            <div class="stats-value"><%= productCount %></div>
            <div class="stats-label">Products</div>
            <div class="stats-trend <%= productCountThisMonth > 0 ? 'positive' : 'negative' %>">
              <i class="fas <%= productCountThisMonth > 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
              <%= productCountThisMonth %> new this month
            </div>
          </div>
        </div>
      </div>

      <!-- Sales Report Section -->
      <div class="row g-3 mb-4">
        <div class="col-12">
          <div class="dashboard-card p-4">
            <!-- Report Header -->
            <div class="report-header">
              <h4 class="report-title">Sales Analytics</h4>
              <div class="report-actions">
                <button class="btn btn-outline-secondary btn-sm report-btn" onclick="refreshReport()">
                  <i class="fas fa-sync-alt me-2"></i>Refresh
                </button>
               
              </div>
            </div>

            <!-- Filters Section -->
            <div class="card mb-4">
              <div class="card-body">
                <div class="row g-3">
                  <div class="col-12 col-md-3">
                    <label class="form-label">Date Range</label>
                    <select class="form-select" id="period-select" onchange="handlePeriodChange()">
                      <option value="">Custom Range</option>
                      <option value="daily">Today</option>
                      <option value="weekly">This Week</option>
                      <option value="monthly">This Month</option>
                      <option value="yearly">This Year</option>
                    </select>
                  </div>
                  <div class="col-12 col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start-date">
                  </div>
                  <div class="col-12 col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end-date">
                  </div>
                  <div class="col-12 col-md-3 d-flex align-items-end">
                    <button class="btn btn-primary w-100" id="Generate-btn" onclick="generateReport()">
                      Generate Report
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Summary Cards -->
            <div class="row g-3 mb-4" id="summary-cards">
              <!-- Will be populated by JavaScript -->
            </div>

            <!-- Charts Section -->
            <div class="row g-3 mb-4">
              <div class="col-12 col-lg-8">
                <div class="card h-100">
                  <div class="card-header" id="card-head">
                    <h5 class="card-title mb-0">Sales Trend</h5>
                  </div>
                  <div class="card-body">
                    <div class="chart-container" style="height: 300px;">
                      <canvas id="salesChart"></canvas>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 col-lg-4">
                <div class="card h-100">
                  <div class="card-header" id="card-head-2">
                    <h5 class="card-title mb-0">Order Status</h5>
                  </div>
                  <div class="card-body">
                    <div class="chart-container" style="height: 300px;">
                      <canvas id="orderStatusChart"></canvas>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Data Table -->
            <div class="card">
              <div class="card-header" id="card-head-3">
                <h5 class="card-title mb-0">Detailed Report</h5>
              </div>
              <div class="card-body">
                <div class="table-responsive" id="sales-data">
                  <!-- Sales data table will be populated here -->
                </div>
              </div>
            </div>

            <!-- Top Products, Categories and Brands -->
            <div class="container py-4">
              <div class="top-lists-container">
                <ul class="nav nav-tabs" id="topListsTabs" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link active" id="products-tab" data-bs-toggle="tab" href="#products">Top Products</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="categories-tab" data-bs-toggle="tab" href="#categories">Top Categories</a>
                  </li>
                  <li class="nav-item">
                    <!-- <a class="nav-link" id="brands-tab" data-bs-toggle="tab" href="#brands">Top Brands</a> -->
                  </li>
                </ul>

                <div class="tab-content">
                  <div class="tab-pane fade show active" id="products">
                    <% if (topSellingProducts && topSellingProducts.length > 0) { %>
                    <% topSellingProducts.forEach((product, index) => { %>
                    <div class="top-list-item">
                      <div class="d-flex align-items-center gap-3">
                        <div class="rank-badge"><%= index + 1 %></div>
                        <div class="item-details flex-grow-1">
                          <h6><%= product.productName %></h6>
                          <p>SKU: <%= product.sku %> | Units Sold: <%= product.totalSales.toLocaleString() %></p>
                        </div>
                        <div class="sales-value">$<%= product.revenue.toLocaleString() %></div>
                      </div>
                    </div>
                    <% }); %>
                    <% } else { %>
                    <div class="p-3 text-center">No product data available</div>
                    <% } %>
                  </div>

                  <div class="tab-pane fade" id="categories">
                    <% if (topCategories && topCategories.length > 0) { %>
                    <% topCategories.forEach((category, index) => { %>
                    <div class="top-list-item">
                      <div class="d-flex align-items-center gap-3">
                        <div class="rank-badge"><%= index + 1 %></div>
                        <div class="item-details flex-grow-1">
                          <h6><%= category.name %></h6>
                          <p>Total Items: <%= category.items.toLocaleString() %> | Units Sold: <%= category.itemsSold.toLocaleString() %></p>
                        </div>
                        <div class="sales-value">$<%= category.totalSales.toLocaleString() %></div>
                      </div>
                    </div>
                    <% }); %>
                    <% } else { %>
                    <div class="p-3 text-center">No category data available</div>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <script src="https://kit.fontawesome.com/your-kit-code.js" crossorigin="anonymous"></script>
<script>
  let salesChart;
let orderStatusChart;
let orderStatusData = <% if (orderStatusData) { %><%- JSON.stringify(orderStatusData) %><% } else { %>[{_id: 'Delivered', count: 0}, {_id: 'Processing', count: 0}, {_id: 'Shipped', count: 0}, {_id: 'Canceled', count: 0}]<% } %>

// Date Range Handling
function handlePeriodChange() {
  const periodSelect = document.getElementById('period-select');
  const startDate = document.getElementById('start-date');
  const endDate = document.getElementById('end-date');
  
  const isCustom = periodSelect.value === '';
  startDate.disabled = !isCustom;
  endDate.disabled = !isCustom;
  
  if (!isCustom) {
    generateReport();
  }
}

// Summary Cards Update
function updateSummaryCards(data) {
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  });
  
  const dailyData = data.dailyBreakdown || [];
  const summary = {
    totalSales: dailyData.reduce((sum, day) => sum + day.sales, 0),
    totalOrders: dailyData.reduce((sum, day) => sum + day.orders, 0),
    totalDiscount: dailyData.reduce((sum, day) => sum + (day.discount || 0), 0),
    averageOrderValue: dailyData.reduce((sum, day) => sum + day.sales, 0) / 
                      dailyData.reduce((sum, day) => sum + day.orders, 0) || 0
  };
  
  const cards = [{
    title: 'Total Sales',
    value: formatter.format(summary.totalSales),
    icon: 'fa-dollar-sign',
    color: 'primary'
  },
  {
    title: 'Total Orders',
    value: summary.totalOrders,
    icon: 'fa-shopping-cart',
    color: 'info'
  },
  {
    title: 'Avg. Order Value',
    value: formatter.format(summary.averageOrderValue),
    icon: 'fa-chart-line',
    color: 'success'
  },
  {
    title: 'Total Discount',
    value: formatter.format(summary.totalDiscount),
    icon: 'fa-tags',
    color: 'warning'
  }];
  
  const html = cards.map(card => `
    <div class="col-12 col-sm-6 col-lg-3">
      <div class="stats-card">
        <div class="stats-icon">
          <i class="fas ${card.icon} fa-fw text-${card.color}"></i>
        </div>
        <div class="stats-value">${card.value}</div>
        <div class="stats-label">${card.title}</div>
      </div>
    </div>
  `).join('');
  
  document.getElementById('summary-cards').innerHTML = html;
}

// Chart Updates
function updateCharts(data) {
  // Extract data from the detailed report
  const dailyData = data.dailyBreakdown || [];
  
  // Prepare data for charts
  const labels = dailyData.map(day => day._id);
  const salesData = dailyData.map(day => day.sales);
  const ordersData = dailyData.map(day => day.orders);
  
  // Update Sales Chart
  const ctx = document.getElementById('salesChart').getContext('2d');
  if (salesChart) {
    salesChart.destroy();
  }
  
  salesChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'Sales ($)',
        data: salesData,
        borderColor: 'rgb(59, 125, 221)',
        backgroundColor: 'rgba(59, 125, 221, 0.1)',
        fill: true,
        yAxisID: 'y'
      }, {
        label: 'Orders',
        data: ordersData,
        borderColor: 'rgb(28, 187, 140)',
        backgroundColor: 'rgba(28, 187, 140, 0.1)',
        fill: true,
        yAxisID: 'y1'
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      interaction: {
        mode: 'index',
        intersect: false,
      },
      plugins: {
        legend: {
          position: 'top'
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              let label = context.dataset.label || '';
              if (label) {
                label += ': ';
                if (context.dataset.label === 'Sales ($)') {
                  label += new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD'
                  }).format(context.raw);
                } else {
                  label += context.raw;
                }
              }
              return label;
            }
          }
        }
      },
      scales: {
        y: {
          type: 'linear',
          display: true,
          position: 'left',
          title: {
            display: true,
            text: 'Sales ($)'
          },
          ticks: {
            callback: value => '$' + value.toLocaleString()
          }
        },
        y1: {
          type: 'linear',
          display: true,
          position: 'right',
          title: {
            display: true,
            text: 'Orders'
          },
          grid: {
            drawOnChartArea: false
          }
        }
      }
    }
  });
  
  // Update Order Status Chart
  const ctxStatus = document.getElementById('orderStatusChart').getContext('2d');
  if (orderStatusChart) {
    orderStatusChart.destroy();
  }
  
  const statusLabels = orderStatusData.map(item => item._id);
  const statusCounts = orderStatusData.map(item => item.count);
  
  const colorMap = {
    'Delivered': '#28a745',
    'Processing': '#17a2b8',
    'Shipped': '#007bff',
    'Canceled': '#dc3545',
    'Refunded': '#ffc107'
  };
  
  orderStatusChart = new Chart(ctxStatus, {
    type: 'doughnut',
    data: {
      labels: statusLabels,
      datasets: [{
        data: statusCounts,
        backgroundColor: statusLabels.map(status => colorMap[status] || '#6c757d')
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'right'
        }
      }
    }
  });
}

// Table Update
function updateTable(data) {
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2
  });
  
  const dailyData = data.dailyBreakdown || [];
  
  const tableRows = dailyData.map(day => `
    <tr>
      <td>${day._id}</td>
      <td class="text-end">${day.orders}</td>
      <td class="text-end">${formatter.format(day.sales)}</td>
      <td class="text-end">${formatter.format(day.discount || 0)}</td>
      <td class="text-end">${formatter.format(day.sales - (day.discount || 0))}</td>
      <td class="text-end">${day.discount ? ((day.discount / day.sales) * 100).toFixed(1) : '0.0'}%</td>
    </tr>
  `).join('');
  
  const total = {
    orders: dailyData.reduce((sum, day) => sum + day.orders, 0),
    sales: dailyData.reduce((sum, day) => sum + day.sales, 0),
    discount: dailyData.reduce((sum, day) => sum + (day.discount || 0), 0)
  };
  total.net = total.sales - total.discount;
  
  const tableHtml = `
    <table class="table table-sm table-hover">
      <thead>
        <tr>
          <th>Date</th>
          <th class="text-end">Orders</th>
          <th class="text-end">Sales</th>
          <th class="text-end">Discounts</th>
          <th class="text-end">Net Sales</th>
          <th class="text-end">Discount %</th>
        </tr>
      </thead>
      <tbody>
        ${tableRows}
        <tr class="table-info fw-bold">
          <td>Total</td>
          <td class="text-end">${total.orders}</td>
          <td class="text-end">${formatter.format(total.sales)}</td>
          <td class="text-end">${formatter.format(total.discount)}</td>
          <td class="text-end">${formatter.format(total.net)}</td>
          <td class="text-end">${total.sales > 0 ? ((total.discount / total.sales) * 100).toFixed(1) : '0.0'}%</td>
        </tr>
      </tbody>
    </table>
  `;
  document.getElementById('sales-data').innerHTML = tableHtml;
}

// Report Generation
async function generateReport() {
  try {
    const periodSelect = document.getElementById('period-select');
    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;
    
    const params = new URLSearchParams();
    if (periodSelect.value) {
      params.append('reportType', periodSelect.value);
    } else if (startDate && endDate) {
      params.append('reportType', 'custom');
      params.append('startDate', startDate);
      params.append('endDate', endDate);
    } else {
      alert('Please select a date range');
      return;
    }
    
    const response = await fetch('/admin/fetch-sales-report', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: params.toString()
    });
    
    if (!response.ok) {
      throw new Error('Failed to fetch report data');
    }
    
    const result = await response.json();
    
    if (result.success) {
      updateSummaryCards(result.data);
      updateCharts(result.data);
      updateTable(result.data);
    } else {
      throw new Error(result.error || 'Error generating report');
    }
  } catch (error) {
    console.error('Error generating report:', error);
    alert('Error generating report. Please try again.');
  }
}

// Report Download
async function downloadReport(format) {
  try {
    const periodSelect = document.getElementById('period-select');
    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;
    
    if (!periodSelect.value && (!startDate || !endDate)) {
      alert('Please select a date range or period');
      return;
    }
    
    const button = document.querySelector(`button[onclick="downloadReport('${format}')"]`);
    const originalContent = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Downloading...';
    
    const params = new URLSearchParams();
    params.append('format', format);
    if (periodSelect.value) {
      params.append('reportType', periodSelect.value);
    } else {
      params.append('reportType', 'custom');
      params.append('startDate', startDate);
      params.append('endDate', endDate);
    }
    
    const response = await fetch(`/admin/download-sales-report?${params.toString()}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const contentDisposition = response.headers.get('Content-Disposition');
    let filename = `sales-report.${format}`;
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
      if (filenameMatch && filenameMatch[1]) {
        filename = filenameMatch[1].replace(/['"]/g, '');
      }
    }
    
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = filename;
    
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    
  } catch (error) {
    console.error('Error downloading report:', error);
    alert('Error downloading report. Please try again.');
  } finally {
    const button = document.querySelector(`button[onclick="downloadReport('${format}')"]`);
    button.disabled = false;
    button.innerHTML = format === 'pdf' ?
      '<i class="fas fa-file-pdf me-2"></i>PDF Report' :
      '<i class="fas fa-file-excel me-2"></i>Excel Report';
  }
}

function refreshReport() {
  generateReport();
}

// Initialize when document loads
document.addEventListener('DOMContentLoaded', function() {
  // Set default period to monthly
  document.getElementById('period-select').value = 'monthly';
  handlePeriodChange();
  
  // Initialize date inputs with current date range
  const today = new Date();
  const lastMonth = new Date(today);
  lastMonth.setMonth(today.getMonth() - 1);
  
  document.getElementById('start-date').value = lastMonth.toISOString().split('T')[0];
  document.getElementById('end-date').value = today.toISOString().split('T')[0];
  
  // Generate initial report
  generateReport();
});
</script>
</body>

</html>