<%- include("../../views/partials/admin/header") %>

    <head>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #ffffff;
                color: #333;
                padding: 1px;
                margin: 0;
            }

            .form-container {
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #ffffff;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            h2 {
                margin-bottom: 30px;
                font-size: 18px;
                color: #333;
            }

            .form-row {
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
            }

            .form-group {
                flex: 1;
            }

            label {
                display: block;
                margin-bottom: 8px;
                font-size: 13px;
                color: #333;
            }

            .required::after {
                content: "*";
                color: red;
                margin-left: 4px;
            }

            input,
            select {
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: #ffffff;
                color: #333;
                height: 40px;
                box-sizing: border-box;
            }

            .input-group {
                display: flex;
                gap: 10px;
                align-items: center;
            }

            .generate-btn {
                padding: 8px 16px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                height: 40px;
                white-space: nowrap;
            }

            .error-text {
                color: #dc3545;
                font-size: 12px;
                margin-top: 4px;
                display: none;
            }

            .button-group {
                display: flex;
                justify-content: flex-end;
                gap: 10px;
                margin-top: 30px;
            }

            .cancel-btn {
                padding: 8px 20px;
                background-color: #dc3545;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

            .create-btn {
                padding: 8px 20px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

            #maxDiscountRow {
                display: none;
            }
        </style>
    </head>

    <body>
        <div class="form-container">
            <h2>update Coupon</h2>
            <form id="couponForm">
                <div class="form-row">
                    <div class="form-group" style="flex: 2;">
                        <label class="required">Coupon Code</label>
                        <div class="input-group">
                            <input type="text" id="couponCode" value="<%= coupons.code %>" readonly>
                        </div>
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Discount Type</label>
                        <select id="discountType">
                            <option value="fixed" <%=coupons.discountType==='fixed' ? 'selected' :'' %>>Fixed Amount
                            </option>
                            <option value="percentage" <%=coupons.discountType==='percentage' ? 'selected' :'' %>
                                >Percentage</option>
                        </select>
                        <div class="error-text">This field is required</div>
                    </div>
                    <div class="form-group">
                        <label class="required">Discount Value</label>
                        <input type="text" id="discountValue" value="<%= coupons.discountValue%>">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row" id="maxDiscountRow">
                    <div class="form-group">
                        <label class="required">Max Discount</label>
                        <input type="text" id="maxDiscount" value="<%= coupons.maxDiscount %>">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Minimum Purchase</label>
                        <input type="text" id="minPurchase" value="<%= coupons.minPurchase %>">
                        <div class="error-text">This field is required</div>
                    </div>
                    <div class="form-group">
                        <label class="required">Start Date</label>
                        <input type="date" id="startDate"
                            value="<%= new Date(coupons.startDate).toISOString().split('T')[0] %>">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">End Date</label>
                        <input type="date" id="endDate"
                            value="<%= new Date(coupons.endDate).toISOString().split('T')[0] %>">
                        <div class="error-text">This field is required</div>
                    </div>
                    <div class="form-group">
                        <label class="required">Usage Limit</label>
                        <input type="text" id="usageLimit" value="<%= coupons.usageLimit %>">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Status</label>
                        <select id="isActive">
                            <option value="Active" <%=coupons.isActive==='Active' ? 'selected' : '' %>>Active</option>
                            <option value="Inactive" <%=coupons.isActive==='Inactive' ? 'selected' : '' %>>Inactive
                            </option>
                        </select>
                    </div>
                </div>

                <div class="button-group">
                    <a href="/admin/coupenManagmentlist">
                        <button type="button" class="cancel-btn">Cancel</button>
                    </a>
                   
                    <button type="submit" class="update-btn">Update Coupon</button>
                </div>
            </form>
        </div>

        <%- include("../../views/partials/admin/footer") %>

            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const elements = {
                        form: document.getElementById("couponForm"),
                        discountType: document.getElementById("discountType"),
                        discountValue: document.getElementById("discountValue"),
                        maxDiscount: document.getElementById("maxDiscount"),
                        minPurchase: document.getElementById("minPurchase"),
                        startDate: document.getElementById("startDate"),
                        endDate: document.getElementById("endDate"),
                        usageLimit: document.getElementById("usageLimit"),
                        isActive: document.getElementById("isActive"),
                        maxDiscountRow: document.getElementById("maxDiscountRow")
                    };

                    function handleDiscountTypeChange() {
                        const isFixed = elements.discountType.value === 'fixed';
                        elements.maxDiscountRow.style.display = isFixed ? 'none' : 'block';

                        
                        if (isFixed) {
                            elements.maxDiscount.value = '';
                        }
                    }
                    elements.discountType.addEventListener('change', handleDiscountTypeChange);
                    handleDiscountTypeChange();

                    // Format currency
                    const formatCurrency = (value) => {
                        return new Intl.NumberFormat('en-US', {
                            style: 'currency',
                            currency: 'USD',
                            minimumFractionDigits: 2
                        }).format(value);
                    };

                    // Error handling utility
                    const handleError = (input, message) => {
                        const errorText = input.nextElementSibling;
                        if (errorText?.classList.contains("error-text")) {
                            errorText.innerText = message;
                            errorText.style.display = "block";
                        }
                        return false;
                    };

                    // Clear errors
                    const clearErrors = () => {
                        document.querySelectorAll(".error-text").forEach(error => {
                            error.style.display = "none";
                            error.innerText = "";
                        });
                    };

                    // Validation functions
                    const validators = {
                        required: (value, fieldName) => value.trim() ? true : `${fieldName} is required`,
                        numeric: (value) => !isNaN(parseFloat(value)) && value > 0 ? true : "Please enter a valid positive number",
                        percentage: (value) => value >= 1 && value <= 100 ? true : "Percentage must be between 1 and 100",
                        date: (value, compareDate, comparison) => {
                            const date = new Date(value);
                            const compDate = new Date(compareDate);
                            return comparison(date, compDate) ? true : "Invalid date range";
                        },
                        integer: (value) => Number.isInteger(parseFloat(value)) && value > 0 ? true : "Please enter a valid positive whole number"
                    };

                    // Form validation
                    const validateForm = () => {
                        clearErrors();
                        let isValid = true;

                        // Validate discount value and type
                        const discountVal = parseFloat(elements.discountValue.value);
                        if (elements.discountType.value === "percentage") {
                            if (!validators.percentage(discountVal)) {
                                isValid = handleError(elements.discountValue, "Percentage must be between 1 and 100");
                            }

                            const maxDiscVal = parseFloat(elements.maxDiscount.value);
                            if (!validators.numeric(maxDiscVal)) {
                                isValid = handleError(elements.maxDiscount, "Please enter a valid max discount amount");
                            }
                        }

                        // Validate minimum purchase
                        const minPurchaseVal = parseFloat(elements.minPurchase.value);
                        if (!validators.numeric(minPurchaseVal)) {
                            isValid = handleError(elements.minPurchase, "Please enter a valid minimum purchase amount");
                        }

                        // Validate dates
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);

                        if (!validators.date(elements.startDate.value, today, (a, b) => a >= b)) {
                            isValid = handleError(elements.startDate, "Start date cannot be in the past");
                        }

                        if (!validators.date(elements.endDate.value, elements.startDate.value, (a, b) => a > b)) {
                            isValid = handleError(elements.endDate, "End date must be after start date");
                        }

                        // Validate usage limit
                        if (!validators.integer(elements.usageLimit.value)) {
                            isValid = handleError(elements.usageLimit, "Please enter a valid usage limit");
                        }

                        return isValid;
                    };

                    // Form submission handler
                    elements.form.addEventListener("submit", async function (event) {
                        event.preventDefault();

                        if (!validateForm()) return;

                        const formData = {
                            code: document.getElementById("couponCode").value,
                            discountType: elements.discountType.value,
                            discountValue: parseFloat(elements.discountValue.value),
                            maxDiscount: elements.discountType.value === "fixed" ? null : parseFloat(elements.maxDiscount.value),
                            minPurchase: parseFloat(elements.minPurchase.value),
                            startDate: elements.startDate.value,
                            endDate: elements.endDate.value,
                            usageLimit: parseInt(elements.usageLimit.value),
                            isActive: elements.isActive.value
                        };



                        try {
                            const response = await fetch("/admin/Updatecoupons", {
                                method: "PUT",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(formData)
                            });

                             if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }

                            const result = await response.json();

                            if (result.success) {
                                Swal.fire({
                                    title: "Success!",
                                    text: "Coupon updated successfully",
                                    icon: "success",
                                    confirmButtonText: "OK"
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = '/admin/coupenManagmentlist';
                                    }
                                });
                            } else {
                                throw new Error(result.message || "Failed to update coupon");
                            }
                        } catch (error) {
                            Swal.fire({
                                title: "Error!",
                                text: error.message || "Something went wrong. Please try again.",
                                icon: "error",
                                confirmButtonText: "OK"
                            });
                            console.error("Error updating coupon:", error);
                        }
                    });
                });

            </script>
    </body>