<%- include("../../views/partials/admin/header") %>

<head>
    <!-- Consolidated CSS imports -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
</head>

<style>
   /* .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .image-container {
            width: 300px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        
        .preview-container {
            margin: 10px 0;
        }
        
        /* .image-preview {
            max-width: 100%;
            height: auto;
            margin: 10px 0;
            display: none;
        } */
        
        /* .cropper-container {
          
            margin-top: 15px;
        }
        
        .cropper-preview-container {
            max-width: 100%;
            margin-bottom: 15px;
        }
        
        .cropper-preview {
            max-width: 100%;
            display: block;
        }
        
        .btn-crop-controls {
            margin-top: 10px;
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        /* Important: Set specific size for cropper container */
        /* .cropper-view-box,
        .cropper-face {
            border-radius: 50%;
        }  */


        .thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
    justify-content: center; /* Center items horizontally */
}

.image-container {
    width: 300px;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    display: flex;
    flex-direction: column; /* Aligns content vertically */
    align-items: center; /* Centers content horizontally */
    justify-content: space-between; /* Space out elements inside the container */
    background-color: #fff;
}

.preview-container {
    margin: 10px 0;
    display: flex;
    justify-content: center; /* Centers preview image */
    align-items: center;
}

.image-preview {
    max-width: 100%;
    height: auto;
    margin: 10px 0;
    display: block; /* Ensure image is shown */
}

.cropper-container {
    margin-top: 15px;
    display: flex;
    flex-direction: column;
    align-items: center; /* Center cropper controls */
}

.cropper-preview-container {
    max-width: 100%;
    margin-bottom: 15px;
    display: flex;
    justify-content: center; /* Center cropper preview */
}

.cropper-preview {
    max-width: 100%;
    display: block;
    border-radius: 8px;
}

.btn-crop-controls {
    margin-top: 10px;
    display: flex;
    gap: 10px;
    justify-content: center; /* Center buttons */
}

.btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

/* Important: Set specific size for cropper container */
.cropper-view-box,
.cropper-face {
    border-radius: 50%;
}

</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form enctype="multipart/form-data" id="productForm">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input   type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message text-danger"></div>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                            <div style="color: red;" id="description-error" class="error-message text-danger"></div>
                        </div>

                        <!-- Price and Quantity -->
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" id="regularPrice" name="regularPrice" type="number" step="0.01" class="form-control">
                                    <div id="regularPrice-error" class="error-message text-danger"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="$" id="salePrice" name="salePrice" type="number" step="0.01" class="form-control">
                                    <div id="salePrice-error" class="error-message text-danger"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" id="quantity" type="number" min="0" class="form-control">
                                    <div id="quantity-error" class="error-message text-danger"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Color -->
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" id="color" type="text" class="form-control">
                                    <div id="color-error" class="error-message text-danger"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Category -->
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select id="category" class="form-select" name="category">
                                            <% for(let i=0; i<cat.length; i++) {%>
                                                <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                            <%}%>
                                        </select>
                                        <div id="category-error" class="error-message text-danger"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Image Upload -->
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="thumbnails-container">
                                        <div id="images-error" class="error-message text-danger"></div>
                                        <% for(let i=1; i <= 3; i++) { %>


                                            <div class="image-container">
                                                <h5>Image <%= i %></h5>
                                                <div class="preview-container">

                                                    <img src="" alt="" id="imgView<%= i %>" class="image-preview">
                                                    <input class="form-control" type="file" onchange="viewImage1(event, '<%= i %>'), viewImage(event, '<%= i %>' )" name="images" id="input<%= i %>"
                                                           accept="image/png, image/jpeg, image/jpg">
                                                          
                                                </div>
                                                <div id="cropperContainer<%= i %>" class="cropper-container">
                                                    <div class="cropper-preview-container">

                                                        <img src="" id="cropperPreview<%= i %>" class="cropper-preview">
                                                        <div class="preview-container-<%= i %>" style="width: 150px; height: 150px; overflow: hidden; margin-top: 10px;"></div>
                                                    </div>

                                                    <div class="btn-crop-controls">
                                                        <button type="button" class="btn btn-primary" id="saveButton<%= i %>">Save Crop</button>
                                                        <!-- <button type="button" class="btn btn-secondary" onclick="window.history.back()">Cancel</button> -->
                                                    </div>
                                                </div>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="mt-4">
                            <button id="submit-button" type="button" class="btn btn-primary" >Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script> -->
<script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
   async function validateAndSubmit(event){
    try {
        event.preventDefault()
        if(!validateForm()){
            return;
        }
        const form = document.getElementById('productForm')
        const formData = new FormData(form)
        const response = await fetch('/admin/addProducts', {
            method: 'POST',
            body:formData
        })
        const data = await response.json()
        if(!response.ok) {
            throw new Error(data.message);

        }
        if (data.success) {
  Swal.fire({
    title: "Success!",
    text: "Added successfully.",
    icon: "success",
    confirmButtonText: "OK",
  }).then(() => {
    window.location.href = "/admin/products";
  });
}

    } catch (error) {
        Swal.fire({
            title: 'Oops!',
            text: error.message,
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
   }  
   document.getElementById('submit-button').addEventListener('click',validateAndSubmit)





   function viewImage1(event, i) {
    document.getElementById("imgView"+i).src = URL.createObjectURL(event.target.files[0]);
}

// function viewImage2(event) {
//     document.getElementById("imgView"+i).src = URL.createObjectURL(event.target.files[0]);
// }

// function viewImage3(event) {
//     document.getElementById("imgView3"+i).src = URL.createObjectURL(event.target.files[0]);
// }

// function viewImage4(event) {
//     document.getElementById("imgView4"+i).src = URL.createObjectURL(event.target.files[0]);
// }



function viewImage(event, index) {
    let input = event.target;
    let reader = new FileReader();
    reader.onload = function () {
        let dataURL = reader.result;
        let image = document.getElementById(`imgView${index}`);
        image.src = dataURL;

        let cropper= new Cropper(image,{
            aspectRatio:1,
            viewMode:1,
            guides:true,
            background:false,
            autoCropArea:1,
            zoomable:true,
  });
  console.log(image)
  let cropperContainer = document.querySelector("#cropperPreview" + index);
cropperContainer.style.display = 'block';

let saveButton = document.querySelector("#saveButton" + index);
saveButton.addEventListener('click', async function () {
    let croppedCanvas = cropper.getCroppedCanvas();
    let croppedImage = document.getElementById("cropperPreview" + index);
    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

let timestamp = new Date().getTime();
let fileName = `cropped-img-${timestamp}-${index}.png`;

await croppedCanvas.toBlob(blob => {
    let input = document.getElementById('input' + index);
    let imgFile = new File([blob], fileName, blob);
    const fileList = new DataTransfer();
    fileList.items.add(imgFile);
    input.files = fileList.files;
});
 
// cropperContainer.style.display="none";
// cropper.derstroy();




});

  
    };

    reader.readAsDataURL(input.files[0]);


    
}
//set tumpunail
const selectedImages = [];
document.getElementById("input1").addEventListener("change", handleFileSelect);

function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = "";
    const files = event.target.files;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        selectedImages.push(file);

        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";

        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icone")
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function () {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
            thumbnail.remove();
        });

        thumbnail.append(img);
        thumbnail.append(removeIcon);
        addedImagesContainer.append(thumbnail);
    }
}



   
//    function validateForm() {
//               clearErrorMessages();
//               const name = document.getElementsByName('productName')[0].value;
//               const description = document.getElementById('descriptionid').value;
//               const brand = document.getElementsByName('brand')[0].value;
//               const price = document.getElementsByName('regularPrice')[0].value;
//               const saleprice = document.getElementsByName('salePrice')[0].value;
//               const color = document.getElementsByName('color')[0].value;
//               const category = document.getElementsByName('category')[0].value;
//               const images = document.getElementById('input1')
//               const quantity=document.getElementsByName('quantity')
//               let isValid = true
//               if (name.trim() === "") {
//       displayErrorMessage('productName-error', 'Please enter a product name.');
//       isValid = false;
//    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
//       displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
//       isValid = false;
//    }
            
//    if (description.trim() === "") {
//       displayErrorMessage('description-error', 'Please enter a product description.');
//       isValid = false;
//    } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
//       displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
//       isValid = false;
//    }
  
  
           
  
  
//               if ( parseInt(quantity) < 0) {
//                   displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
//                   isValid = false;
//               }
  
  
  
  
//               if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
//                   displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
//                   isValid = false;
//               }
  
  
  
  
//               if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
//                   displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
//                   isValid = false;
//               }
//               if (parseFloat(price) <= parseFloat(saleprice)) {
//       displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
//       isValid = false;
//    }
  
  
//               if (color.trim() === "") {
//                   displayErrorMessage('color-error', 'Please enter a color.');
//                   isValid = false;
//               }
  
  
//               if (images.files.length === 0) {
//                   displayErrorMessage("images-error",'Please select an image.');
//                   isValid = false;
//               }
//               return isValid;
//           }


//           function displayErrorMessage(elementId, message) {
//               var errorElement = document.getElementById(elementId);
//               errorElement.innerText = message;
//               errorElement.style.display = "block";
//           }
  
  
//           function clearErrorMessages() {
//               const errorElements = document.getElementsByClassName('error-message');
//               Array.from(errorElements).forEach(element => {
//                   element.innerText = '';
//               });
//               const errorMessage = document.getElementById('errorMessage');
  
  
//           }

function validateForm() {
    clearErrorMessages();

    const name = document.getElementById('product_name').value;
    const description = document.getElementById('descriptionid').value;
    const price = document.getElementById('regularPrice').value;
    const salePrice = document.getElementById('salePrice').value;
    const color = document.getElementById('color').value;
    const category = document.getElementById('category').value;
    const quantity = document.getElementById('quantity').value;
    console.log(quantity)
    const images = document.getElementsByName('images');
    let isValid = true;
    console.log(isValid)

    // Validate product name
    if (name.trim() === "") {
        console.log('name')
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
        console.log('name11')
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    // Validate description (allowing special characters and numbers)
    if (description.trim() === "") {
        console.log('descritpion')
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    // Validate quantity (should be non-negative)
    if (parseInt(quantity) < 0 || !quantity) {
        console.log('qty')
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    // Validate regular price
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        console.log('price')
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Validate sale price
    if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
        console.log('sale price')
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
        isValid = false;
    }

    // Check if sale price is greater than regular price
    if (parseFloat(salePrice) >= parseFloat(price)) {
        console.log('price and saleprice')
        displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
        isValid = false;
    }

    // Validate color
    if (color.trim() === "") {
        console.log('color')
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    // Validate category
    if (category.trim() === "") {
        console.log('category')
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    // Validate image upload
    images.forEach((element) => {
        if(!element.files || element.files.length === 0) {
            console.log('image')
        displayErrorMessage(`images-error`, 'Please upload at least one image.');
        isValid = false;
        }
    })
    // if (!images.files.length) {
       
    // }

    return isValid;
}

function displayErrorMessage(id, message) {
    document.getElementById(id).innerHTML = message;
    document.getElementById(id).style.display = 'block';
}

function clearErrorMessages() {
    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach((msg) => {
        msg.innerHTML = '';
        msg.style.display = 'none';
    });
}


// document.getElementById("button").addEventListener("click",async function(event){
//     event.preventDefault()

//     const name = document.getElementById('product_name').value;


    
//     // const error = document.getElementById("description-error")

//     if(name.trim() == ""){
    
   
//     error.textContent = "name is requird"
//     }
//     if(name.trim() !=""){
//         error.textContent =
//     }
  
    

// })

       


</script>

<%- include("../../views/partials/admin/footer") %>
    