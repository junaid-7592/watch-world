<%- include("../../views/partials/admin/header") %>

    <head>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #ffffff;
                color: #333;
                padding: 1px;
                margin: 0;
            }

            .form-container {
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #ffffff;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            h2 {
                margin-bottom: 30px;
                font-size: 18px;
                color: #333;
            }

            .form-row {
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
            }

            .form-group {
                flex: 1;
            }

            label {
                display: block;
                margin-bottom: 8px;
                font-size: 13px;
                color: #333;
            }

            .required::after {
                content: "*";
                color: red;
                margin-left: 4px;
            }

            input,
            select {
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: #ffffff;
                color: #333;
                height: 40px;
                box-sizing: border-box;
            }

            .input-group {
                display: flex;
                gap: 10px;
                align-items: center;
            }

            .generate-btn {
                padding: 8px 16px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                height: 40px;
                white-space: nowrap;
            }

            .error-text {
                color: #dc3545;
                font-size: 12px;
                margin-top: 4px;
                display: none;
            }

            .button-group {
                display: flex;
                justify-content: flex-end;
                gap: 10px;
                margin-top: 30px;
            }

            .cancel-btn {
                padding: 8px 20px;
                background-color: #dc3545;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

            .create-btn {
                padding: 8px 20px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

            /* Hide max discount initially */
            #maxDiscountRow {
                display: none;
            }
        </style>
    </head>

    <body>
        <div class="form-container">
          
            <h2>Add New Coupon</h2>
            <form id="couponForm">
                <div class="form-row">
                    <div class="form-group" style="flex: 2;">
                        <label class="required">Coupon Code</label>
                        <div class="input-group">
                            <input type="text" id="couponCode" readonly>
                            <button type="button" class="generate-btn" onclick="generateCouponCode()">Generate</button>
                        </div>
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Discount Type</label>
                        <select id="discountType">
                            <option value="">Select</option>
                            <option value="fixed">Fixed Amount</option>
                            <option value="percentage">Percentage</option>
                        </select>
                        <div class="error-text">This field is required</div>
                    </div>
                    <div class="form-group">
                        <label class="required">Discount Value</label>
                        <input type="text" id="discountValue">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row" id="maxDiscountRow">
                    <div class="form-group">
                        <label class="required">Max Discount</label>
                        <input type="text" id="maxDiscount">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Minimum Purchase</label>
                        <input type="text" id="minPurchase">
                        <div class="error-text">This field is required</div>
                    </div>
                    <div class="form-group">
                        <label class="required">Start Date</label>
                        <input type="date" id="startDate">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">End Date</label>
                        <input type="date" id="endDate">
                        <div class="error-text">This field is required</div>
                    </div>
                    <div class="form-group">
                        <label class="required">Usage Limit</label>
                        <input type="text" id="usageLimit">
                        <div class="error-text">This field is required</div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Status</label>
                        <select id="isActive">
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>
                </div>

                <div class="button-group">
                    <a href="/admin/coupenManagmentlist">
                    <button type="button" class="cancel-btn">Cancel</button>
                    </a>
                    <button type="submit" class="create-btn">Create Coupon</button>
                </div>
            </form>
        </div>

        <%- include("../../views/partials/admin/footer") %>

            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

            <script>

                document.getElementById('discountType').addEventListener('change', function () {
                    const maxDiscountRow = document.getElementById('maxDiscountRow');
                    if (this.value === 'fixed') {
                        maxDiscountRow.style.display = 'none';
                        document.getElementById('maxDiscount').value = '';
                    } else {
                        maxDiscountRow.style.display = 'block';
                    }
                });



                function generateCouponCode() {
                    document.getElementById('couponCode').value = 'COUPON' + Math.floor(Math.random() * 100000);
                }


                document.addEventListener("DOMContentLoaded", function () {
                    const couponForm = document.getElementById("couponForm");
                    const discountType = document.getElementById("discountType");
                    const discountValue = document.getElementById("discountValue");
                    const maxDiscount = document.getElementById("maxDiscount");
                    const minPurchase = document.getElementById("minPurchase");
                    const startDate = document.getElementById("startDate");
                    const endDate = document.getElementById("endDate");
                    const usageLimit = document.getElementById("usageLimit");
                    const isActive = document.getElementById("isActive");

                    // Helper function to format currency
                    const formatCurrency = (value) => {
                        return new Intl.NumberFormat('en-US', {
                            style: 'currency',
                            currency: 'USD',
                            minimumFractionDigits: 2
                        }).format(value);
                    };

                    // Validation function
                    function validateForm() {
                        let isValid = true;
                        // Clear all previous error messages
                        document.querySelectorAll(".error-text").forEach(error => {
                            error.style.display = "none";
                            error.innerText = "";
                        });

                        function setError(input, message) {
                            const errorText = input.nextElementSibling;
                            if (errorText && errorText.classList.contains("error-text")) {
                                errorText.innerText = message;
                                errorText.style.display = "block";
                            }
                            isValid = false;
                        }

                        // Coupon Code Validation
                        const couponCode = document.getElementById("couponCode");
                        if (!couponCode.value.trim()) {
                            setError(couponCode, "Please generate a coupon code first");
                        } else if (couponCode.value.length < 6) {
                            setError(couponCode, "Coupon code must be at least 6 characters long");
                        }

                        // Discount Type Validation
                        if (!discountType.value) {
                            setError(discountType, "Please select a discount type");
                        }

                        // Discount Value Validation
                        const discountVal = parseFloat(discountValue.value);
                        console.log(discountType , discountVal)
                        if (!discountValue.value.trim()) {
                            setError(discountValue, "Discount value is required");
                        } else if (isNaN(discountVal) || discountVal <= 0) {
                            setError(discountValue, "Please enter a valid positive number");
                        } else if (discountType.value == "percentage") {
                            if (discountVal > 70) {
                                setError(discountValue, "Percentage discount cannot exceed 70%");
                            } else if (discountVal < 1) {
                                setError(discountValue, "Minimum percentage discount is 1%");
                            }
                        }

                        if (discountType.value === "percentage") {
                            const maxDiscVal = parseFloat(maxDiscount.value);
                            if (!maxDiscount.value.trim()) {
                                setError(maxDiscount, "Max discount is required for percentage type");
                            } else if (isNaN(maxDiscVal) || maxDiscVal <= 0) {
                                setError(maxDiscount, "Please enter a valid positive number");
                            }
                        }

                        // Minimum Purchase Validation
                        const minPurchaseVal = parseFloat(minPurchase.value);
                        if (!minPurchase.value.trim()) {
                            setError(minPurchase, "Minimum purchase amount is required");
                        } else if (isNaN(minPurchaseVal) || minPurchaseVal <= 0) {
                            setError(minPurchase, "Please enter a valid positive number");
                        } else {
                            // Check discount value relationships
                            if (discountType.value === "fixed" && discountVal >= minPurchaseVal) {
                                setError(discountValue, `Fixed discount (${formatCurrency(discountVal)}) must be less than minimum purchase amount (${formatCurrency(minPurchaseVal)})`);
                            } else if (discountType.value === "percentage") {
                                const maxDiscVal = parseFloat(maxDiscount.value);
                                if (maxDiscVal >= minPurchaseVal) {
                                    setError(maxDiscount, `Max discount (${formatCurrency(maxDiscVal)}) must be less than minimum purchase amount (${formatCurrency(minPurchaseVal)})`);
                                }
                            }
                        }

                        // Date Validation
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        const startDateVal = new Date(startDate.value);
                        const endDateVal = new Date(endDate.value);

                        if (!startDate.value) {
                            setError(startDate, "Start date is required");
                        } else if (startDateVal < today) {
                            setError(startDate, "Start date cannot be in the past");
                        }

                        if (!endDate.value) {
                            setError(endDate, "End date is required");
                        } else if (endDateVal <= startDateVal) {
                            setError(endDate, "End date must be after start date");
                        }

                        // Usage Limit Validation
                        const usageLimitVal = parseInt(usageLimit.value);
                        if (!usageLimit.value.trim()) {
                            setError(usageLimit, "Usage limit is required");
                        } else if (isNaN(usageLimitVal) || usageLimitVal <= 0 || !Number.isInteger(usageLimitVal)) {
                            setError(usageLimit, "Please enter a valid positive whole number");
                        }

                        return isValid;
                    }

                    // Form Submission Handler
                    couponForm.addEventListener("submit", async function (event) {
                        event.preventDefault();

                        if (!validateForm()) {
                            return;
                        }

                        const formData = {
                            code: document.getElementById("couponCode").value,
                            discountType: discountType.value,
                            discountValue: parseFloat(discountValue.value),
                            maxDiscount: discountType.value === "fixed" ? null : parseFloat(maxDiscount.value),
                            minPurchase: parseFloat(minPurchase.value),
                            startDate: startDate.value,
                            endDate: endDate.value,
                            usageLimit: parseInt(usageLimit.value),
                            isActive: isActive.value
                        };

                        try {
                            const response = await fetch("/admin/coupons", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify(formData)
                            });

                            console.log("------>", FormData);


                            const result = await response.json();
                            if (result.success) {
                                Swal.fire({
                                    title: "Success!",
                                    text: "Coupon created successfully",
                                    icon: "success",
                                    confirmButtonText: "OK"
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        couponForm.reset();


                                        document.getElementById("couponCode").value = "";
                                        window.location.href='/admin/coupenManagmentlist'
                                    }
                                });
                            } else {
                                Swal.fire("Error!", result.message || "Failed to create coupon", "error");
                            }
                        } catch (error) {
                            Swal.fire("Error!", "Something went wrong. Please try again.", "error");
                            console.error("Error creating coupon:", error);
                        }
                    });
                });
            </script>
    </body>