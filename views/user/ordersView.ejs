<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 20px;
        }

        .order-header {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .order-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .order-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 500;
            background-color: #e3f2fd;
            color: #1565c0;
        }

        .payment-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 500;
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        .order-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .info-group {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .info-group h3 {
            color: #666;
            margin-bottom: 0.8rem;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .products-list {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-top: 1.5rem;
        }

        .product-item {
            display: grid;
            grid-template-columns: auto 1fr auto;



            gap: 1.5rem;
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
        }

        .product-details h3 {
            margin-bottom: 0.5rem;
        }

        .product-price {
            text-align: right;
        }

        .order-summary {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-top: 1.5rem;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.8rem;
        }

        .total-row {
            border-top: 2px solid #eee;
            padding-top: 1rem;
            margin-top: 1rem;
            font-weight: bold;
        }

        .btn {
            display: inline-block;
            padding: 0.8rem 1.5rem;
            border-radius: 4px;
            text-decoration: none;
            font-weight: 500;
            transition: background-color 0.3s;
        }

        .btn-primary {
            background-color: #1565c0;
            color: white;
        }

        .btn-primary:hover {
            background-color: #0d47a1;
        }

        .header-top {
            background: #0083c1 none repeat scroll 0 0;
            border-bottom: 1px solid #1198d8;
            z-index: 21;
            margin-top: -32px;
        }

        @media (max-width: 768px) {
            .order-title {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .product-item {
                grid-template-columns: 1fr;
                text-align: center;
            }

            .product-image {
                margin: 0 auto;
            }

            .product-price {
                text-align: center;
            }
        }
    </style>


</head>


<body>
    <%- include ("../../views/partials/user/header") %>
        <div class="container">
            <div class="order-header">
                <div class="order-title">

                    <%order%>
                        <div>
                            <h1>OrderId</h1>
                            <h3>
                                <%= order._id %>
                            </h3>
                            <p>Placed on <%= new Date(order.createdAt).toDateString() %>
                            </p>
                        </div>

                        <% if(order.paymentMethod=="onlinepayment" && order.status=="failed" ) { %>
                            <div style="text-align: center; margin-top: 2rem;">
                                <button id="retrypayment" class="btn btn-success" style="margin-top: -2rem;"
                                    onclick="retryPayment('<%= order._id %>')">
                                    Retry Payment
                                </button>
                            </div>
                            <% } %>


                                <div>

                                    <span class="order-status">
                                        <%= order.status %>
                                    </span>

                                    <% if (order.status === "Cancelled" || order.status === "Returned") { %>
                                        <span class="payment-status" style="color: red;">Refunded</span>
                                    <% } else if (order.status === "Delivered" || order.paymentStatus === "paid" || order.status === "Return-Request") { %>
                                        <span class="payment-status" style="color: rgb(44, 129, 44);">Paid</span>
                                    <% } else { %>
                                        <span class="payment-status" style="color: red;">Unpaid</span>
                                    <% } %>
                                    
                                </div>



                </div>

            </div>

            <div class="order-info">
                <div class="info-group">
                    <h3>Shipping Address</h3>
                    <p>
                        <%= order.address %>
                    </p>
                    <!-- <p><%= order.address.city %></p>
                
                <p><%= order.address.pincode %></p> -->

                </div>


                <div class="info-group">
                    <h3>Payment Method</h3>
                    <p>
                        <%= order.paymentMethod %>
                    </p>
                </div>

              
            </div>

            <div class="products-list">
                <div class="products-list">
                    <% if (order && order.orderedItems) { %>
                        <% order.orderedItems.forEach(item=> { %>
                            <div class="product-item">
                                <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.name %>"
                                    class="product-image">
                                <div class="product-details">
                                    <p>Name:<%= item.product.productName %>
                                    </p>
                                    <p>Quantity: <%= item.quantity %>
                                    </p>
                                    <p>Price: <%= item.price %>
                                    </p>
                                </div>
                            </div>
                            <% }) %>
                                <% } else { %>
                                    <p>No products found.</p>
                                    <% } %>



                                        <div class="product-item">

                                        </div>
                </div>

                <div class="order-summary">
                    <h2>Order Summary</h2>
                    <div class="summary-row">
                        <span>discount</span>
                        <span>₹<%= order.discount %></span>

                    </div>
                 
                    <div class="summary-row total-row">
                        <span>Total</span>
                        <span>₹<%= order.totalPrice %></span>




                    </div>
                </div>

                <%if(order.status!=='Cancelled' && order.status!=="Delivered" &&order.status!=="Return-Request" && order.status !== "Returned"){%>
                    <div style="text-align: center; margin-top: 2rem;">
                        <a href="#" id="cancelOrder" class="btn btn-primary">Cancel</a>
                    </div>

                    <%}%>

                        <%if(order.status=="Delivered"){%>
                            <div style="text-align: center; margin-top: 2rem;">
                                <a href="#" id="returnOrder" class="btn btn-success">Return</a>
                            </div>

                            <%}%>





                                <div style="text-align: center; margin-top: 2rem;">
                                    <a href="/" class="btn btn-primary">Back To Home</a>
                               
                                <button id="downloadInvoice" class="btn btn-outline-primary btn-uniform" data-order-id="<%= order._id %>">
                                    Download Invoice
                                </button>
                            </div>

                                <!-- <div style="text-align: center; margin-top: 2rem;">
            <a href="#" class="btn btn-primary">cancel</a> 
        </div>  -->
            </div>
</body>

</html>
<%-include ("../../views/partials/user/footer") %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>

        let userId = "<%= order.userId %>"
        document.addEventListener("DOMContentLoaded", function () {
            const cancelBtn = document.getElementById("cancelOrder");

            // Store Order ID and Total Amount safely
            const orderId = "<%= order._id %>";
            const totalAmount = "<%= order.totalPrice %>";
            console.log("this totalAmount", totalAmount);

            cancelBtn.addEventListener("click", async function (e) {
                e.preventDefault();

                try {
                    const reasonResult = await Swal.fire({
                        title: 'Cancel Order',
                        input: 'textarea',
                        inputLabel: 'Reason for Cancel',
                        inputPlaceholder: 'Please provide a reason for returning this order...',
                        inputAttributes: {
                            'aria-label': 'Cancel reason'
                        },
                        showCancelButton: true,
                        inputValidator: (value) => {
                            if (!value) {
                                return 'You need to provide a reason for cancel!';
                            }
                        }
                    });

                    if (reasonResult.isConfirmed && reasonResult.value) {

                        const cancelResponse = await fetch(`/order/cancel/${orderId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId: orderId,
                                amount: totalAmount,
                                reason: reasonResult.value
                            })
                        });

                        const cancelData = await cancelResponse.json();

                        if (!cancelData.success) {
                            throw new Error(cancelData.message || 'Failed to cancel order');
                        }


                        const refundResponse = await fetch(`/refund/${orderId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId: orderId,
                                amount: totalAmount
                            })
                        });

                        const refundData = await refundResponse.json();

                        if (!refundData.success) {
                            throw new Error(refundData.message || 'Failed to process refund');
                        }

                        // Show success message and reload
                        await Swal.fire(
                            "Cancelled!",
                            "Your order has been cancelled and refunded.",
                            "success"
                        );

                        location.reload();
                    }
                } catch (error) {
                    console.error("Error:", error);
                    await Swal.fire(
                        "Error!",
                        error.message || "Something went wrong!",
                        "error"
                    );
                }
            });
        });


        // .....................................................
        document.addEventListener("DOMContentLoaded", function () {
            const returnBtn = document.getElementById("returnOrder");
            const orderId = "<%= order._id %>";

            returnBtn.addEventListener("click", async function (e) {
                e.preventDefault();

                try {
                    const reasonResult = await Swal.fire({
                        title: "Return Order",
                        input: "textarea",
                        inputLabel: "Reason for Return",
                        inputPlaceholder: "Please provide a reason for returning this order...",
                        inputAttributes: {
                            "aria-label": "return reason"
                        },
                        showCancelButton: true,
                        inputValidator: (value) => {
                            if (!value) {
                                return "You need to provide a reason for return!";
                            }
                        }
                    });

                    if (reasonResult.isConfirmed && reasonResult.value) {
                        const response = await fetch(`/order/return`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId: orderId,
                                reason: reasonResult.value
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            await Swal.fire(
                                "Success!",
                                result.message || "Return request submitted successfully.",
                                "success"
                            );

                            // Optionally, reload the page or update UI
                            location.reload();
                        } else {
                            throw new Error(result.message || "Failed to process return request.");
                        }
                    }

                } catch (error) {
                    console.error("Error:", error);
                    await Swal.fire(
                        "Error!",
                        error.message || "Something went wrong!",
                        "error"
                    );
                }
            });
        });


        async function retryPayment(orderId) {
             let userId = "<%= order.userId %>"
             let selectedAddress = "<%= order.address %>"
             let paymentMethod = "<%= order.paymentMethod %>"
             let subTotalvalue = "<%= order.totalPrice %>"
             let couponCode = "<%= order.couponCode %>"
    try {
        // Step 1: Create Razorpay order
        const response = await fetch('/recreate-orderRazorpay', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ orderId })
        });

        const orderData = await response.json();
        if (!orderData.success || !orderData.newOrder || !orderData.newOrder.id) {
            throw new Error("Failed to create Razorpay order");
        }

        console.log(" Razorpay Order Data:", orderData);

        // Step 2: Initialize Razorpay payment options
        let options = {
            "key": "rzp_test_T7fmLotqdQ3Hde", // Replace with actual key
            "order_id": orderData.newOrder.id, // Corrected: order_id is required by Razorpay
            "amount": orderData.newOrder.amount, // Amount in paisa
            "currency": orderData.newOrder.currency,
            "name": "Your Store",
            "description": "Order Payment",
            "handler": async function (response) {
                console.log("Payment Success:", response);
                
                // Step 3: Send payment success details to backend
                const successResponse = await fetch('/orderSuccess', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId,
                        orderId,
                        paymentId: response.razorpay_payment_id,
                        selectedAddress,
                        paymentMethod,
                        subTotalvalue,
                        couponCode
                        
                    })
                });

                const result = await successResponse.json();
                if (result.success) {
                    Swal.fire({
                        title: "Order Placed!",
                        text: "Your order has been placed successfully.",
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        window.location.href = `/orderSuccess?orderId=${result.orderId}`;
                    });
                } else {
                    Swal.fire("Order Failed", `Error: ${result.message}`, "error");
                }
            },
            "prefill": {
                "name": "Customer Name",
                "email": "customer@example.com",
                "contact": "9999999999"
            },
            "theme": {
                "color": "#3399cc"
            }
        };

        // Step 4: Open Razorpay Payment Window
        let rzp = new Razorpay(options);

        rzp.on('payment.failed', async function (response) {
            console.error(" Payment Failed:", response);
            
            await Swal.fire({
                title: 'Payment Failed',
                text: 'Redirecting to the checkout page',
                icon: 'error',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = `/profile`;
            });

            try {
                // Step 5: Update order status to Failed
                await fetch('/failed-orderRazorpay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId })
                });

            } catch (error) {
                console.error('Error handling payment failure:', error);
                Swal.fire('Error', 'Something went wrong. Please try again.', 'error')
                    .then(() => {
                        window.history.back();
                    });
            }
        });

        rzp.open();
    } catch (error) {
        console.error(" Razorpay Payment Error:", error);
        Swal.fire("Payment Error", "Error in processing Razorpay payment. Please try again!", "error");
    }
}


document.getElementById("downloadInvoice").addEventListener("click", function() {
            const orderId = this.getAttribute("data-order-id");
            
            fetch(`/download-invoice/${orderId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/pdf",
                }
            })
            .then((response) => response.blob())
            .then((blob) => {
                const link = document.createElement("a");
                link.href = window.URL.createObjectURL(blob);
                link.download = `invoice_${orderId}.pdf`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            })
            .catch((error) => {
                console.error("Error downloading invoice:", error);
                alert("Failed to download invoice. Please try again.");
            });
        });


    </script>