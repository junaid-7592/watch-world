<%- include("../../views/partials/user/header") %>
<div class="container mt-4">
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Create User Address</h3>
   <form id="addressForm" method="POST" action="/addAddress" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" id="addressType" name="addressType" required>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" name="city" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" id="state" name="state" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" id="pincode" name="pincode" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" id="altPhone" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById('addressForm').addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent default form submission

        if (!validateForm()) {
            return; // Stop if validation fails
        }

        // Collect form data
        const formData = new FormData(this);
        const formObject = Object.fromEntries(formData.entries());

        try {
            const response = await fetch("/addAddress", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formObject),
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: "success",
                    title: "Success!",
                    text: result.message,
                    confirmButtonText: "OK",
                }).then(() => {
                    window.location.href = "/profile"; // Redirect after success
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: result.message,
                });
            }
        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                icon: "success",
                    title: "Success!",
                    text: "Added Succesfully",
                    confirmButtonText: "OK",
            }).then(() => {
                    window.location.href = "/checkout"; // Redirect after success
                });
        }
    });
 

  function validateForm() {
      let isValid = true;
      const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
      
      requiredFields.forEach(function(field) {
          const input = document.getElementById(field);
          const inputValue = input.value.trim();
          const errorElement = document.getElementById(field + '-error');

          if (inputValue === "") {
              if (!errorElement) {
                  const errorMessage = "This field is required.";
                  const errorDiv = document.createElement('div');
                  errorDiv.className = "text-danger";
                  errorDiv.textContent = errorMessage;
                  errorDiv.id = field + '-error';
                  input.parentNode.appendChild(errorDiv);
              }
              isValid = false;
          } else {
              if (errorElement) {
                  errorElement.remove();
              }
          }
      });

      const namePattern = /^[A-Za-z\s]+$/;
      const pincodePattern = /^\d{6}$/;
      const phonePattern = /^\d{10}$/;

      const name = document.getElementById('name').value;
      const city = document.getElementById('city').value;
      const landMark = document.getElementById('landMark').value;
      const state = document.getElementById('state').value;
      const pincode = document.getElementById('pincode').value;
      const phone = document.getElementById('phone').value;
      const altPhone = document.getElementById('altPhone').value;

      if (!namePattern.test(name)) {
          showValidationError('name', 'Name should contain alphabets only.');
          isValid = false;
      }
      if (!namePattern.test(city)) {
          showValidationError('city', 'City should contain alphabets only.');
          isValid = false;
      }
      if (!namePattern.test(landMark)) {
          showValidationError('landMark', 'Landmark should contain alphabets only.');
          isValid = false;
      }
      if (!namePattern.test(state)) {
          showValidationError('state', 'State should contain alphabets only.');
          isValid = false;
      }
      if (!pincodePattern.test(pincode)) {
          showValidationError('pincode', 'Pincode should be a 6-digit number.');
          isValid = false;
      }
      if (!phonePattern.test(phone)) {
          showValidationError('phone', 'Phone number should be a 10-digit number.');
          isValid = false;
      }
      if (!phonePattern.test(altPhone)) {
          showValidationError('altPhone', 'Alternate phone number should be a 10-digit number.');
          isValid = false;
      }
      if (phone === altPhone) {
          showValidationError('altPhone', 'Phone number and alternate phone number should be different.');
          isValid = false;
      }

      return isValid;
  }

  function showValidationError(fieldId, message) {
      const input = document.getElementById(fieldId);
      const errorElement = document.getElementById(fieldId + '-error');

      if (!errorElement) {
          const errorDiv = document.createElement('div');
          errorDiv.className = "text-danger";
          errorDiv.textContent = message;
          errorDiv.id = fieldId + '-error';
          input.parentNode.appendChild(errorDiv);
      }
  }
</script>


<%- include("../../views/partials/user/footer") %>
